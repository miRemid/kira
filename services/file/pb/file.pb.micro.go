// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/file.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FileService service

func NewFileServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FileService service

type FileService interface {
	// RPC
	GenerateToken(ctx context.Context, in *TokenUserReq, opts ...client.CallOption) (*TokenUserRes, error)
	RefreshToken(ctx context.Context, in *TokenUserReq, opts ...client.CallOption) (*TokenUserRes, error)
	// API
	// /file/getHistory
	GetHistory(ctx context.Context, in *GetHistoryReq, opts ...client.CallOption) (*GetHistoryRes, error)
	// /file/delete
	DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...client.CallOption) (*DeleteFileRes, error)
	// /file/upload
	UploadFile(ctx context.Context, in *UploadFileReq, opts ...client.CallOption) (*UploadFileRes, error)
}

type fileService struct {
	c    client.Client
	name string
}

func NewFileService(name string, c client.Client) FileService {
	return &fileService{
		c:    c,
		name: name,
	}
}

func (c *fileService) GenerateToken(ctx context.Context, in *TokenUserReq, opts ...client.CallOption) (*TokenUserRes, error) {
	req := c.c.NewRequest(c.name, "FileService.GenerateToken", in)
	out := new(TokenUserRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) RefreshToken(ctx context.Context, in *TokenUserReq, opts ...client.CallOption) (*TokenUserRes, error) {
	req := c.c.NewRequest(c.name, "FileService.RefreshToken", in)
	out := new(TokenUserRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) GetHistory(ctx context.Context, in *GetHistoryReq, opts ...client.CallOption) (*GetHistoryRes, error) {
	req := c.c.NewRequest(c.name, "FileService.GetHistory", in)
	out := new(GetHistoryRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...client.CallOption) (*DeleteFileRes, error) {
	req := c.c.NewRequest(c.name, "FileService.DeleteFile", in)
	out := new(DeleteFileRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) UploadFile(ctx context.Context, in *UploadFileReq, opts ...client.CallOption) (*UploadFileRes, error) {
	req := c.c.NewRequest(c.name, "FileService.UploadFile", in)
	out := new(UploadFileRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileService service

type FileServiceHandler interface {
	// RPC
	GenerateToken(context.Context, *TokenUserReq, *TokenUserRes) error
	RefreshToken(context.Context, *TokenUserReq, *TokenUserRes) error
	// API
	// /file/getHistory
	GetHistory(context.Context, *GetHistoryReq, *GetHistoryRes) error
	// /file/delete
	DeleteFile(context.Context, *DeleteFileReq, *DeleteFileRes) error
	// /file/upload
	UploadFile(context.Context, *UploadFileReq, *UploadFileRes) error
}

func RegisterFileServiceHandler(s server.Server, hdlr FileServiceHandler, opts ...server.HandlerOption) error {
	type fileService interface {
		GenerateToken(ctx context.Context, in *TokenUserReq, out *TokenUserRes) error
		RefreshToken(ctx context.Context, in *TokenUserReq, out *TokenUserRes) error
		GetHistory(ctx context.Context, in *GetHistoryReq, out *GetHistoryRes) error
		DeleteFile(ctx context.Context, in *DeleteFileReq, out *DeleteFileRes) error
		UploadFile(ctx context.Context, in *UploadFileReq, out *UploadFileRes) error
	}
	type FileService struct {
		fileService
	}
	h := &fileServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FileService{h}, opts...))
}

type fileServiceHandler struct {
	FileServiceHandler
}

func (h *fileServiceHandler) GenerateToken(ctx context.Context, in *TokenUserReq, out *TokenUserRes) error {
	return h.FileServiceHandler.GenerateToken(ctx, in, out)
}

func (h *fileServiceHandler) RefreshToken(ctx context.Context, in *TokenUserReq, out *TokenUserRes) error {
	return h.FileServiceHandler.RefreshToken(ctx, in, out)
}

func (h *fileServiceHandler) GetHistory(ctx context.Context, in *GetHistoryReq, out *GetHistoryRes) error {
	return h.FileServiceHandler.GetHistory(ctx, in, out)
}

func (h *fileServiceHandler) DeleteFile(ctx context.Context, in *DeleteFileReq, out *DeleteFileRes) error {
	return h.FileServiceHandler.DeleteFile(ctx, in, out)
}

func (h *fileServiceHandler) UploadFile(ctx context.Context, in *UploadFileReq, out *UploadFileRes) error {
	return h.FileServiceHandler.UploadFile(ctx, in, out)
}
